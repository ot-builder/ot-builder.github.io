(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[954],{648:(e,n,s)=>{"use strict";s.d(n,{PV:()=>h,X$:()=>d,ah:()=>j,b0:()=>p,g1:()=>c,gP:()=>l,lq:()=>t,pi:()=>a,tB:()=>i,vU:()=>x,yA:()=>o,zs:()=>r});let t=e=>({optional:e}),r=e=>({rest:e}),i=e=>({readonly:e}),l=function(){for(var e=arguments.length,n=Array(e),s=0;s<e;s++)n[s]=arguments[s];return{either:n}},h=function(){for(var e=arguments.length,n=Array(e),s=0;s<e;s++)n[s]=arguments[s];return{tuple:n}},o=function(e){for(var n=arguments.length,s=Array(n>1?n-1:0),t=1;t<n;t++)s[t-1]=arguments[t];return{generic:e,args:s}},a=(e,n)=>({takes:e,returns:n}),c=e=>({object:e}),p=(e,n)=>({rawType:e,annotation:n}),d=(e,n)=>({operator:"extends",left:e,right:n}),x=(e,n)=>({operator:"=",left:e,right:n}),j=(e,n)=>({operator:"is",left:e,right:n})},2338:(e,n,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/references/cli-proc",function(){return s(8946)}])},8946:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>p});var t=s(6514),r=s(9066),i=s(7244),l=s(419),h=s(6898),o=s(648);let a=i.P;function c(e){let n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{children:["Namespace ",(0,t.jsx)(l.xi,{s:h.VS})]}),"\n",(0,t.jsxs)(n.p,{children:["The namespace ",(0,t.jsx)(l.R,{s:h.VS})," contains programmatic implementations of various CLI functionality."]}),"\n",(0,t.jsx)(n.h2,{children:"Consolidation"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.consolidateFont((0,o.X$)("GS",h.Ot.GlyphStore)),args:{font:h.Ot.Font("GS")},returns:"void"})]}),"\n",(0,t.jsx)(n.p,{children:"Consolidates the font, including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cleanup all the data references to glyphs not present in font's glyph set."}),"\n",(0,t.jsx)(n.li,{children:"Cleanup fonts' OTL tables, like merging identical feature records under same language."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"Garbage Collection"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.gcFont((0,o.X$)("GS",h.Ot.GlyphStore)),args:{font:h.Ot.Font("GS"),gsf:h.Ot.GlyphStoreFactory("GS")},returns:"void"})]}),"\n",(0,t.jsxs)(n.p,{children:["Reduces the ",(0,t.jsx)(n.em,{children:"font"}),"'s glyph set to all glyphs accessible."]}),"\n",(0,t.jsx)(n.h2,{children:"Subsetting"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.subsetFont((0,o.X$)("GS",h.Ot.GlyphStore)),args:{font:h.Ot.Font("GS"),text:(0,h.vE)(h.Yj),gsf:h.Ot.GlyphStoreFactory("GS")},returns:"void"})]}),"\n",(0,t.jsxs)(n.p,{children:["Reduces the ",(0,t.jsx)(n.em,{children:"font"}),"'s glyph set to all glyphs accessible from ",(0,t.jsx)(n.em,{children:"text"}),"."]}),"\n",(0,t.jsx)(n.h2,{children:"Font Merging"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.mergeFonts((0,o.X$)("GS1",h.Ot.GlyphStore),(0,o.X$)("GS2",h.Ot.GlyphStore)),args:{basis:h.Ot.Font("GS1"),override:h.Ot.Font("GS2"),gsf:h.Ot.GlyphStoreFactory("GS1"),options:(0,o.lq)(h.VS.MergeOptions)}})]}),"\n",(0,t.jsxs)(n.p,{children:["Create a combined font ",(0,t.jsx)(n.em,{children:"override"})," into font ",(0,t.jsx)(n.em,{children:"basis"}),", which will have a new glyph store and new ",(0,t.jsx)(n.code,{children:"cmap"}),", ",(0,t.jsx)(n.code,{children:"GSUB"}),", ",(0,t.jsx)(n.code,{children:"GPOS"})," and ",(0,t.jsx)(n.code,{children:"GDEF"})," tables. The remaining tables will be shared with ",(0,t.jsx)(n.em,{children:"basis"}),"."]}),"\n",(0,t.jsxs)(n.h3,{children:["DataType ",(0,t.jsx)(l.xi,{s:h.VS.MergeOptions})]}),"\n",(0,t.jsx)(n.h4,{children:"Members"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(l.dP,{s:h.VS.MergeOptions.preferOverride,type:(0,o.lq)(h.zM)}),"\n",(0,t.jsxs)(n.p,{children:["When set, the character mapping and OTL will prefer the mapping in ",(0,t.jsx)(n.em,{children:"override"})," over ",(0,t.jsx)(n.em,{children:"basis"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"Changing UPM"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.rebaseFont((0,o.X$)("GS",h.Ot.GlyphStore)),args:{font:h.Ot.Font("GS"),newUpm:h.ai},returns:"void"})]}),"\n",(0,t.jsxs)(n.p,{children:["Reduces the ",(0,t.jsx)(n.em,{children:"font"}),"'s units-per-em value to ",(0,t.jsx)(n.em,{children:"newUpm"}),"."]}),"\n",(0,t.jsx)(n.h2,{children:"Unify Design Space"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.unifyDesignSpaces((0,o.X$)("GS",h.Ot.GlyphStore)),args:{fonts:(0,h.YO)(h.Ot.Font("GS"))},returns:"void"})]}),"\n",(0,t.jsx)(n.p,{children:"Unify the design space of the input when they are compatible; Otherwise raise error."}),"\n",(0,t.jsx)(n.h2,{children:"Glyph Set Sharing"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.shareGlyphSet((0,o.X$)("GS",h.Ot.GlyphStore)),args:{fonts:(0,h.YO)(h.Ot.Font("GS")),gsf:h.Ot.GlyphStoreFactory("GS"),options:(0,o.lq)(h.VS.ShareGlyphSetOptions)},returns:"void"})]}),"\n",(0,t.jsx)(n.p,{children:"Unify the glyph set by glyph shape. This procedure is usually used when creating TTC files from TTF files."}),"\n",(0,t.jsxs)(n.h3,{children:["DataType ",(0,t.jsx)(l.xi,{s:h.VS.ShareGlyphSetOptions})]}),"\n",(0,t.jsx)(n.h4,{children:"Members"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(l.dP,{s:h.VS.ShareGlyphSetOptions.unifyGlyphList,type:(0,o.lq)(h.zM)}),"\n",(0,t.jsx)(n.p,{children:"Whether to make the glyph list the same. When set to false, only the glyph references will be unified."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"Glyph Geometry Transformation"}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.inPlaceTransformFontGlyph((0,o.X$)("GS",h.Ot.GlyphStore)),args:{fonts:(0,h.YO)(h.Ot.Font("GS")),transform:h.Ot.Glyph.Transform2X3},returns:"void"})]}),"\n",(0,t.jsx)(n.p,{children:"Perform a 2x3 affine transform on all glyphs' geometries. Composite glyphs will get flatten."}),"\n",(0,t.jsxs)(n.h3,{children:["Function ",(0,t.jsx)(l.Fn,{s:h.VS.inPlaceTransformFontGlyphDependent((0,o.X$)("GS",h.Ot.GlyphStore)),args:{fonts:(0,h.YO)(h.Ot.Font("GS")),transformF:(0,o.pi)({glyph:h.Ot.Glyph},h.Ot.Glyph.Transform2X3)},returns:"void"})]}),"\n",(0,t.jsx)(n.p,{children:"Perform a 2x3 affine transform on all glyphs' geometries. The transform may depend on the glyph's content. Composite glyphs will get flatten."})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[468,636,593,792],()=>n(2338)),_N_E=e.O()}]);